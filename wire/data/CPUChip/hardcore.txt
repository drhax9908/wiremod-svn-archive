jmp main; alloc bx; alloc by; alloc vx; alloc vy; alloc p1; alloc p2; alloc score1;
alloc score2; main:; mov eax,0; mov port2,1; mov port5,0; clrscrl1:; mov ebx,0; clrscrl2:;
mov port3,eax; mov port3,ebx; inc ebx; cmp ebx,32; jl clrscrl2; inc eax; cmp eax,32;
jl clrscrl1; mov port2,0; mov #bx,15; mov #by,15; rand #vx; rnd #vx; rand #vy; rnd #vy;
mov #score1,0; mov #score2,0; gameloop:; mov eax,#p1; sub eax,2; mov ebx,#p1; add ebx,2;
for1_loop:; mov port5,0; mov port3,eax; mov port4,31; mov port2,1; mov port2,0; inc eax;
cmp eax,ebx; jle for1_loop; mov eax,#p2; sub eax,2; mov ebx,#p2; add ebx,2; for2_loop:;
mov port5,0; mov port3,eax; mov port4,0; mov port2,1; mov port2,0; inc eax; cmp eax,ebx;
jle for2_loop; mov eax,port2; mul eax,2; add #p1,eax; cmp #p1,2; jge if1_false; mov #p1,2;
if1_false:; cmp #p1,29; jle if2_false; mov #p1,29; if2_false:; cmp #vy,0; jge if3_false;
cmp #bx,#p2; jle if4_false; add #p2,2; if4_false:; cmp #bx,#p2; jge if5_false; sub #p2,2;
if5_false:; if3_false:; cmp #p2,2; jge if6_false; mov #p2,2; if6_false:; cmp #p2,29;
jle if7_false; mov #p2,29; if7_false:; mov port5,0; mov port3,#bx; mov port4,#by;
mov port2,1; mov port2,0; add #bx,#vx; add #by,#vy; mov port5,200; mov port3,#bx;
mov port4,#by; mov port2,1; mov port2,0; mov eax,#p1; sub eax,2; mov ebx,#p1; add ebx,2;
for3_loop:; mov port5,255; mov port3,eax; mov port4,31; mov port2,1; mov port2,0; inc eax;
cmp eax,ebx; jle for3_loop; mov eax,#p2; sub eax,2; mov ebx,#p2; add ebx,2; for4_loop:;
mov port5,255; mov port3,eax; mov port4,0; mov port2,1; mov port2,0; inc eax; cmp eax,ebx;
jle for4_loop; cmp #by,31; jne if8_false; mov eax,#p1; sub eax,2; mov ebx,#p1; add ebx,2;
cmp #bx,eax; jl if9_1_false; cmp #bx,ebx; jg if9_2_false; neg #vy; jmp if8_false;
if9_2_false:; if9_1_false:; inc #score2; mov #bx,15; mov #by,15; neg #vy; if8_false:;
cmp #by,31; jne if10_false; mov eax,#p2; sub eax,2; mov ebx,#p2; add ebx,2; cmp #bx,eax;
jl if11_1_false; cmp #bx,ebx; jg if11_2_false; neg #vy; jmp if10_false; if11_2_false:;
if11_1_false:; inc #score1; mov #bx,15; mov #by,15; neg #vy; if10_false:; cmp #bx,0;
jne if12_false; neg #vx; if12_false:; cmp #bx,31; jne if13_false; neg #vx; if13_false:;
mov port6,4; mov port7,#score1; mov port6,5; mov port7,#score2; cmp port5,0; je gameloop;
stop:; jmp stop;
