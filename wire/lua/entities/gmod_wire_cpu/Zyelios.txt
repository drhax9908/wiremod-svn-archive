 ===============================================================
| ZyeliosCPU & ZyeliosASM are (C) 2007 by Black Phoenix		|
 ---------------------------------------------------------------
| Wire mod is (C) 2006-2007 by WireTeam				|
 ===============================================================

 ===============================================================
| ZyeliosCPU documentation 					|
 ---------------------------------------------------------------
| Chapter 1: Basic execution envrioment				|
 ===============================================================
| 								|
| Registers:							|
| EAX,EBX,ECX,EDX - General purpose registers			|
| ESI, EDI, EBP - Memory pointers/general purpose		|
| ESP - Stack pointer						|
| 								|
| Internal registers:						|
| CMPR - Comparsion register. Result for CMP operation		|
| 								|
| Internal CPU memory:						|
| 65536 values, addressed as 0..65535				|
| 								|
| Stack:							|
| Stack starts at address 65535, and grows down until 16384.	|
| If pop operation tires to read value over address 65535, or	|
| below address 16384, processor will halt, and signal "Stack	|
| error" exception.						|
| 								|
| Execution line:						|
| 1. Fetch opcode and RM					|
| 2. Decode RM byte for param 1 and 2				|
| 3. Execute opcode						|
| 4. Writeback into first parameter				|
| 								|
| RM value and parameter modes:					|
| Each opcode can have 0, 1 or 2 parameters. Parameters are	|
| determined by RM value. RM value consists of 2 two-digit 	|
| values, coresponding to parameter 1 and parameter 2.		|
| RM may point to immediate value, memory via displacement,	|
| register, memory via register.				|
| 								|
| RM values:							|
| 0 - Immediate value						|
| 1..8 - General registers #1..#8				|
| 9..16 - Ports #0..#7						|
| 17..24 - Memory via general registers #1..#8			|
| 25 - Memory via displacement					|
| 								|
| Errors and error values:					|
| 0.0	| No error						|
| 2.0	| End of program execution/opcode 0			|
| 3.0	| Division by zero					|
| 4.0	| Unknown opcode					|
| 5.0	| Internal error					|
| 6.0	| Stack error						|
| 								|
 ---------------------------------------------------------------

 ===============================================================
| ZyeliosCPU documentation					|
 ---------------------------------------------------------------
| Chapter 2: Instruction set reference				|
 ===============================================================
| 								|
| Instruction set, version 1.3					|
| 								|
| Opcode | Mnemonic	| Psuedo-code				|
|---------------------------------------------------------------|
| 1	 | JNE/JNZ X	| IP = X; IF CMPR <> 0;			|
| 2	 | JMP X	| IP = X;				|
| 3	 | JG/JNLE X	| IP = X, IF CMPR >  0;			|
| 4	 | JGE/JNL X	| IP = X, IF CMPR >= 0;			|
| 5	 | JL/JNGE X	| IP = X, IF CMPR <  0;			|
| 6	 | JLE/JNG X	| IP = X, IF CMPR <= 0;			|
| 7	 | JE/JZ X	| IP = X, IF CMPR = 0;			|
| 8	 | CPUID X	| EAX = CPUID[X]*;			|
| 9	 | PUSH X	| STACK[ESP] = X; DEC(ESP);**		|
| 10	 | ADD X,Y	| X = X + Y;				|
| 11	 | SUB X,Y	| X = X - Y;				|
| 12	 | MUL X,Y	| X = X * Y;				|
| 13	 | DIV X,Y	| X = X / Y;				|
| 14	 | MOV X,Y	| X = Y;				|
| 15	 | CMP X,Y	| CMPR = X - Y;				|
| 16	 | RD X,Y	| X = MEMORY[Y];***			|
| 17	 | WD X,Y	| MEMORY[X] = Y;***			|
| 18	 | MIN X,Y	| X = MIN(X,Y);				|
| 19	 | MAX X,Y	| X = MAX(X,Y);				|
| 20	 | INC X	| X = X + 1;				|
| 21	 | DEC X	| X = X - 1;				|
| 22	 | NEG X	| X = -X;				|
| 23	 | RAND X	| X = RANDOM(0..1);			|
| 30	 | POP X	| INC(ESP); X = STACK[ESP];**		|
| 31	 | CALL X	| PUSH(IP); IP = X;			|
| 32	 | NOT X	| X = NOT X;				|
| 33	 | INT X	| X = FLOOR(X);				|
| 34	 | RND X	| X = ROUND(X);				|
| 35	 | FRAC X	| X = X - FLOOR(X);			|
| 36	 | FINV X	| X = 1 / X;				|
| 37	 | HALT X	| STOP UNTIL INPUT FROM PORT X		|
| 40	 | RET		| POP(IP);				|
| 50	 | AND X,Y	| X = X AND Y				|
| 51	 | OR X,Y	| X = X OR Y				|
| 52	 | XOR X,Y	| X = X XOR Y				|
| 53	 | FSIN X,Y	| X = SIN Y				|
| 54	 | FCOS X,Y	| X = COS Y				|
| 55	 | FTAN X,Y	| X = TG Y				|
| 56	 | FASIN X,Y	| X = ARCSIN Y				|
| 57	 | FACOS X,Y	| X = ARCCOS Y				|
| 58	 | FATAN X,Y	| X = ARCTAN Y				|
|---------------------------------------------------------------|
| 								|
| * - CPUID:							|
| X	| EAX meaning						|
|---------------------------------------------------------------|
| 0.0	| CPU ID/Version					|
| 1.0	| On-board RAM size					|
|---------------------------------------------------------------|
| 								|
| ** - If processor is unable to push/pop value it will signal	|
|      error 6.0 (stack error)					|
| 								|
| *** - These opcodes are not recomended to use. 		|
| 								|
 ---------------------------------------------------------------




 ===============================================================
| ZyeliosASM documentation					|
 ===============================================================
| 								|
| ZyeliosASM uses assembler language, and its syntax is pretty	|
| close to such of popular assemblers, like MASM.		|
| 								|
| There are opcodes (commands for processor), opcode parameters	|
| and labels/variables/defines/macros.				|
| 								|
| Ofcourse there are few limitations, which will be fixed ASAP.	|
| For example, each macro or opcode must be seperated with ";"	|
| 								|
| OPCODES SYNTAX:						|
| <opcode> <parameter1>,<parameter2>				|
| Opcode is one of processors opcodes, info about opcodes is	|
| available in ZyeliosCPU documentation.			|
| Parameter1 and parameter2 are parameters. For certain opcodes	|
| One or both parameters may be missing.			|
| !!! THERE SHOULD BE NO SPACE BETWEEN COMMA AND PARAMETERS !!!	|
| The previous limitation is due to compilers inability to	|
| remove spaces.						|
| 								|
| Example:							|
| mov eax,port4;						|
| 								|
| PARAMETERS SYNTAX:						|
| ZyeliosASM can take various things as opcode parameters.	|
| Here are possible values:					|
| * EAX,EBX,ECX,EDX,ESI,EDI,ESP,EBP - Value of one of general 	|
| 		registers with same name.			|
| * PORT0,PORT1,...,PORT7 - Value of one of ports.		|
| !!! Notice: when CPU reads from port, it uses input port.	|
| When CPU performs write, it writes directly to output port.	|
| This is why MOV PORT0,PORT1; will set value of port 1 in out	|
| port 0. Single-opcode operands, for example NEG, will read	|
| value from INPUT and then write into same port in OUTPUT.	|
| There must be no spaces between comma and parameters.		|
| * <NAME> - Using define name, label name, or variable	name	|
| 		will be replaced with labels/variables address,	|
|		or define value.				|
| * #<NAME> - This will read value in internal memory from	|
|		address specified by name. Name might be 	|
|		variable name, or general purpose register.	|
| 								|
| LABELS SYNTAX:						|
| Labels are defined as:					|
| <name>:							|
| If label is not ending the line, there should be ";" in end.	|
| 								|
| EXAMPLE:							|
| mainloop:							|
| 								|
| VARIABLES & VARIABLE SYNTAX:					|
| Variables are values in memory. Variables can be single value	|
| or array of values.						|
| Variables are defined using ALLOC macro.			|
| 								|
| Variable value can be read at any time using "#<variablename>"|
| syntax.							|
| 								|
| EXAMPLE:							|
| mov eax,#somevar;						|
| alloc somevar;						|
| 								|
| "ALLOC" MACRO:						|
| Alloc macro will create new variable, and set it to zero.	|
| Alloc writes this variable in code, thats why you cant define	|
| variables inside executing code, yet.				|
| 								|
| Alloc can be used in 4 ways:					|
| alloc; - will allocate 1 value and set it to zero		|
| alloc <value>; - will allocate <value> values			|
| alloc <name>; - will allocate 1 value with specific name	|
| alloc <name>,<value>; - will allocate array with specific name|
|			and <value> members.			|
| alloc <name>,<value>,<value2>; - will allocate array with name|
| 			and set its members to <value2>		|
| 								|
| "DEFINE" MACRO:						|
| This macro will create new value definition, which can be used|
| as parameter in future.					|
| 								|
| Syntax:							|
| define <name>,<value>;					|
| This will create new definition with <name> and <value>	|
| 								|
| EXAMPLE:							|
| define smth,4;						|
| mov eax,smth; <-- This will compile into mov eax,4;		|
| 								|
| "ORG" MACRO:							|
| ORG macro will change code position to specific one.		|
| If ORG is first operand, it can be used to specify code offset|
| 								|
| Syntax:							|
| ORG <offset>;							|
| 								|
| "DATA" MACRO:							|
| Data macro is equal to this code:				|
| 								|
| ORG 8196;							|
| define DATASTART,8196;					|
| 								|
| NOTE: Offset value for DATA may CHANGE! Thats why you should	|
| use DATASTART define instead of 8196 value. 			|
| On the other hand its gurantied that new DATA offset won't be	|
| lower than 8196!						|
| 								|
| "CODE" MACRO:							|
| CODE macro is equal to this code:				|
| 								|
| ORG 0;							|
| define CODESTART,0;						|
| 								|
| COMMENTS SYNTAX:						|
| Right now only one way of commenting is available:		|
| Putting "//" (double right slash) will make compiler ignore	|
| rest of line after "//"					|
| 								|
 ---------------------------------------------------------------
| 								|
| Example of source code:					|
| 1. Screen bars (screenbars.txt):				|
| Before using this code you must wire such scheme:		|
| CPU.Port0 -> Screen.PixelX					|
| CPU.Port1 -> Screen.PixelY					|
| CPU.Port2 -> Screen.PixelG					|
| Input 1 -> CPU.Clock (Input must be toggleable)		|
| Input 1 -> Screen.Clock					|
| Constant Value (2000) -> CPU.Frequency			|
| 								|
| Source code:							|
| DATA; 							|
| alloc color;							|
| CODE;								|
| mov #color,0;							|
| mov eax,0; 	//EAX will be X, EBX - Y			|
| loopx:							|
|   mov port0,eax;						|
|   mov ebx,0;							|
|   loopy:							|
|     mov port1,ebx;						|
|     add #color,8;						|
|     cmp #color,255; 						|
|     jle if1_false;						|
|       mov #color,128						|
|     if1_false:						|
|     inc ebx;							|
|     cmp ebx,32; 						|
|     jl loopy; 						|
|   inc eax;							|
|   cmp eax,32;							|
|   jl loopx;							|
| 								|
| After executing this code program will end with error code 2	|
| 								|
 ---------------------------------------------------------------